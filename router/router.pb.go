// Code generated by protoc-gen-go. DO NOT EDIT.
// source: router.proto

package funcext

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Excel struct {
	Sheets               []*Sheet `protobuf:"bytes,1,rep,name=sheets,proto3" json:"sheets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Excel) Reset()         { *m = Excel{} }
func (m *Excel) String() string { return proto.CompactTextString(m) }
func (*Excel) ProtoMessage()    {}
func (*Excel) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{0}
}

func (m *Excel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Excel.Unmarshal(m, b)
}
func (m *Excel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Excel.Marshal(b, m, deterministic)
}
func (m *Excel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Excel.Merge(m, src)
}
func (m *Excel) XXX_Size() int {
	return xxx_messageInfo_Excel.Size(m)
}
func (m *Excel) XXX_DiscardUnknown() {
	xxx_messageInfo_Excel.DiscardUnknown(m)
}

var xxx_messageInfo_Excel proto.InternalMessageInfo

func (m *Excel) GetSheets() []*Sheet {
	if m != nil {
		return m.Sheets
	}
	return nil
}

type Sheet struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rows                 []*Row   `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sheet) Reset()         { *m = Sheet{} }
func (m *Sheet) String() string { return proto.CompactTextString(m) }
func (*Sheet) ProtoMessage()    {}
func (*Sheet) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{1}
}

func (m *Sheet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sheet.Unmarshal(m, b)
}
func (m *Sheet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sheet.Marshal(b, m, deterministic)
}
func (m *Sheet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sheet.Merge(m, src)
}
func (m *Sheet) XXX_Size() int {
	return xxx_messageInfo_Sheet.Size(m)
}
func (m *Sheet) XXX_DiscardUnknown() {
	xxx_messageInfo_Sheet.DiscardUnknown(m)
}

var xxx_messageInfo_Sheet proto.InternalMessageInfo

func (m *Sheet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sheet) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type Row struct {
	Axis                 string   `protobuf:"bytes,1,opt,name=axis,proto3" json:"axis,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{2}
}

func (m *Row) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Row.Unmarshal(m, b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Row.Marshal(b, m, deterministic)
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return xxx_messageInfo_Row.Size(m)
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetAxis() string {
	if m != nil {
		return m.Axis
	}
	return ""
}

func (m *Row) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type NewExcel struct {
	Sheets               []string `protobuf:"bytes,1,rep,name=sheets,proto3" json:"sheets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewExcel) Reset()         { *m = NewExcel{} }
func (m *NewExcel) String() string { return proto.CompactTextString(m) }
func (*NewExcel) ProtoMessage()    {}
func (*NewExcel) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{3}
}

func (m *NewExcel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewExcel.Unmarshal(m, b)
}
func (m *NewExcel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewExcel.Marshal(b, m, deterministic)
}
func (m *NewExcel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewExcel.Merge(m, src)
}
func (m *NewExcel) XXX_Size() int {
	return xxx_messageInfo_NewExcel.Size(m)
}
func (m *NewExcel) XXX_DiscardUnknown() {
	xxx_messageInfo_NewExcel.DiscardUnknown(m)
}

var xxx_messageInfo_NewExcel proto.InternalMessageInfo

func (m *NewExcel) GetSheets() []string {
	if m != nil {
		return m.Sheets
	}
	return nil
}

type Task struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{4}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type StreamRow struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Sheet                string   `protobuf:"bytes,2,opt,name=sheet,proto3" json:"sheet,omitempty"`
	Axis                 string   `protobuf:"bytes,3,opt,name=axis,proto3" json:"axis,omitempty"`
	Value                string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRow) Reset()         { *m = StreamRow{} }
func (m *StreamRow) String() string { return proto.CompactTextString(m) }
func (*StreamRow) ProtoMessage()    {}
func (*StreamRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{5}
}

func (m *StreamRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRow.Unmarshal(m, b)
}
func (m *StreamRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRow.Marshal(b, m, deterministic)
}
func (m *StreamRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRow.Merge(m, src)
}
func (m *StreamRow) XXX_Size() int {
	return xxx_messageInfo_StreamRow.Size(m)
}
func (m *StreamRow) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRow.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRow proto.InternalMessageInfo

func (m *StreamRow) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *StreamRow) GetSheet() string {
	if m != nil {
		return m.Sheet
	}
	return ""
}

func (m *StreamRow) GetAxis() string {
	if m != nil {
		return m.Axis
	}
	return ""
}

func (m *StreamRow) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ExportURL struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportURL) Reset()         { *m = ExportURL{} }
func (m *ExportURL) String() string { return proto.CompactTextString(m) }
func (*ExportURL) ProtoMessage()    {}
func (*ExportURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{6}
}

func (m *ExportURL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExportURL.Unmarshal(m, b)
}
func (m *ExportURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExportURL.Marshal(b, m, deterministic)
}
func (m *ExportURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportURL.Merge(m, src)
}
func (m *ExportURL) XXX_Size() int {
	return xxx_messageInfo_ExportURL.Size(m)
}
func (m *ExportURL) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportURL.DiscardUnknown(m)
}

var xxx_messageInfo_ExportURL proto.InternalMessageInfo

func (m *ExportURL) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*Excel)(nil), "funcext.Excel")
	proto.RegisterType((*Sheet)(nil), "funcext.Sheet")
	proto.RegisterType((*Row)(nil), "funcext.Row")
	proto.RegisterType((*NewExcel)(nil), "funcext.NewExcel")
	proto.RegisterType((*Task)(nil), "funcext.Task")
	proto.RegisterType((*StreamRow)(nil), "funcext.StreamRow")
	proto.RegisterType((*ExportURL)(nil), "funcext.ExportURL")
}

func init() { proto.RegisterFile("router.proto", fileDescriptor_367072455c71aedc) }

var fileDescriptor_367072455c71aedc = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x5d, 0x6b, 0xf2, 0x30,
	0x14, 0xb6, 0xb6, 0xfa, 0xbe, 0x3d, 0xea, 0xfb, 0x11, 0x86, 0x94, 0x8e, 0x0d, 0xc9, 0xc5, 0xf0,
	0xaa, 0x05, 0x65, 0x17, 0xbb, 0x18, 0x63, 0x0c, 0x07, 0x83, 0xe1, 0x45, 0x74, 0x3f, 0xa0, 0x6a,
	0x74, 0x62, 0x6b, 0x4a, 0x92, 0xae, 0xdd, 0xbf, 0xde, 0x4f, 0x18, 0x49, 0xda, 0xaa, 0xe0, 0xee,
	0x72, 0x3e, 0x9e, 0x8f, 0x73, 0x72, 0xa0, 0xcb, 0x59, 0x26, 0x29, 0x0f, 0x52, 0xce, 0x24, 0x43,
	0xbf, 0xd6, 0xd9, 0x7e, 0x49, 0x0b, 0xe9, 0x5f, 0x6e, 0x18, 0xdb, 0xc4, 0x34, 0xd4, 0xe9, 0x45,
	0xb6, 0x0e, 0x69, 0x92, 0xca, 0x4f, 0xd3, 0x85, 0x43, 0x68, 0x4d, 0x8a, 0x25, 0x8d, 0xd1, 0x0d,
	0xb4, 0xc5, 0x3b, 0xa5, 0x52, 0x78, 0xd6, 0xc0, 0x1e, 0x76, 0x46, 0x7f, 0x82, 0x12, 0x1f, 0xcc,
	0x54, 0x9a, 0x94, 0x55, 0x7c, 0x0f, 0x2d, 0x9d, 0x40, 0x08, 0x9c, 0x7d, 0x94, 0x50, 0xcf, 0x1a,
	0x58, 0x43, 0x97, 0xe8, 0x37, 0x1a, 0x80, 0xc3, 0x59, 0x2e, 0xbc, 0xa6, 0xa6, 0xe8, 0xd6, 0x14,
	0x84, 0xe5, 0x44, 0x57, 0x70, 0x08, 0x36, 0x61, 0xb9, 0x02, 0x47, 0xc5, 0x56, 0x54, 0x60, 0xf5,
	0x46, 0x17, 0xd0, 0xfa, 0x88, 0xe2, 0x8c, 0x7a, 0x4d, 0x9d, 0x34, 0x01, 0xc6, 0xf0, 0x7b, 0x4a,
	0x73, 0xe3, 0xb1, 0x7f, 0xe2, 0xd1, 0xad, 0x3d, 0x5d, 0x83, 0x33, 0x8f, 0xc4, 0x4e, 0xd5, 0x65,
	0x24, 0x76, 0x2f, 0xab, 0x92, 0xb7, 0x8c, 0xf0, 0x12, 0xdc, 0x99, 0xe4, 0x34, 0x4a, 0x94, 0xf4,
	0x0f, 0x4d, 0x4a, 0x5e, 0xd3, 0x55, 0xf2, 0xa2, 0x9a, 0x52, 0x1b, 0xb5, 0xcf, 0x19, 0x75, 0x8e,
	0x8d, 0x5e, 0x81, 0x3b, 0x29, 0x52, 0xc6, 0xe5, 0x1b, 0x79, 0x45, 0xff, 0xc0, 0xce, 0x78, 0x5c,
	0x2a, 0xa8, 0xe7, 0xe8, 0xcb, 0x82, 0x36, 0xd1, 0xff, 0x83, 0xc6, 0xd0, 0x99, 0x6d, 0x93, 0x34,
	0xa6, 0x66, 0xaa, 0xc3, 0xa6, 0x75, 0xec, 0xa3, 0xa3, 0xb8, 0xe4, 0xc3, 0x0d, 0x74, 0x0b, 0x7f,
	0xa7, 0x34, 0x57, 0x63, 0x3e, 0x33, 0x6e, 0x80, 0xff, 0xeb, 0xc6, 0x6a, 0x43, 0x7e, 0xaf, 0x4e,
	0xa9, 0x4e, 0xdc, 0x40, 0x0f, 0xd0, 0x7b, 0x5c, 0xad, 0x08, 0xcb, 0xe7, 0xcc, 0x80, 0x0e, 0xec,
	0xf5, 0x4a, 0xfc, 0x7e, 0x60, 0x4e, 0x24, 0xa8, 0x4e, 0x24, 0x98, 0xa8, 0x13, 0xc1, 0x8d, 0xa1,
	0x85, 0xee, 0x00, 0x3d, 0xb1, 0x24, 0xd9, 0xca, 0x13, 0xe9, 0x53, 0x9d, 0xf3, 0x96, 0x17, 0x6d,
	0x4d, 0x37, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xff, 0x74, 0x3b, 0x98, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	SimpleExcel(ctx context.Context, in *Excel, opts ...grpc.CallOption) (*ExportURL, error)
	NewTaskForExcel(ctx context.Context, in *NewExcel, opts ...grpc.CallOption) (*Task, error)
	AddRowToExcel(ctx context.Context, opts ...grpc.CallOption) (Router_AddRowToExcelClient, error)
	CommitTaskForExcel(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ExportURL, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) SimpleExcel(ctx context.Context, in *Excel, opts ...grpc.CallOption) (*ExportURL, error) {
	out := new(ExportURL)
	err := c.cc.Invoke(ctx, "/funcext.Router/SimpleExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) NewTaskForExcel(ctx context.Context, in *NewExcel, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/funcext.Router/NewTaskForExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) AddRowToExcel(ctx context.Context, opts ...grpc.CallOption) (Router_AddRowToExcelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[0], "/funcext.Router/AddRowToExcel", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerAddRowToExcelClient{stream}
	return x, nil
}

type Router_AddRowToExcelClient interface {
	Send(*StreamRow) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type routerAddRowToExcelClient struct {
	grpc.ClientStream
}

func (x *routerAddRowToExcelClient) Send(m *StreamRow) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerAddRowToExcelClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) CommitTaskForExcel(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ExportURL, error) {
	out := new(ExportURL)
	err := c.cc.Invoke(ctx, "/funcext.Router/CommitTaskForExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	SimpleExcel(context.Context, *Excel) (*ExportURL, error)
	NewTaskForExcel(context.Context, *NewExcel) (*Task, error)
	AddRowToExcel(Router_AddRowToExcelServer) error
	CommitTaskForExcel(context.Context, *Task) (*ExportURL, error)
}

// UnimplementedRouterServer can be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (*UnimplementedRouterServer) SimpleExcel(ctx context.Context, req *Excel) (*ExportURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleExcel not implemented")
}
func (*UnimplementedRouterServer) NewTaskForExcel(ctx context.Context, req *NewExcel) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTaskForExcel not implemented")
}
func (*UnimplementedRouterServer) AddRowToExcel(srv Router_AddRowToExcelServer) error {
	return status.Errorf(codes.Unimplemented, "method AddRowToExcel not implemented")
}
func (*UnimplementedRouterServer) CommitTaskForExcel(ctx context.Context, req *Task) (*ExportURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTaskForExcel not implemented")
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_SimpleExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Excel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SimpleExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funcext.Router/SimpleExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SimpleExcel(ctx, req.(*Excel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_NewTaskForExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewExcel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).NewTaskForExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funcext.Router/NewTaskForExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).NewTaskForExcel(ctx, req.(*NewExcel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_AddRowToExcel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).AddRowToExcel(&routerAddRowToExcelServer{stream})
}

type Router_AddRowToExcelServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*StreamRow, error)
	grpc.ServerStream
}

type routerAddRowToExcelServer struct {
	grpc.ServerStream
}

func (x *routerAddRowToExcelServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerAddRowToExcelServer) Recv() (*StreamRow, error) {
	m := new(StreamRow)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Router_CommitTaskForExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).CommitTaskForExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funcext.Router/CommitTaskForExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).CommitTaskForExcel(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "funcext.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleExcel",
			Handler:    _Router_SimpleExcel_Handler,
		},
		{
			MethodName: "NewTaskForExcel",
			Handler:    _Router_NewTaskForExcel_Handler,
		},
		{
			MethodName: "CommitTaskForExcel",
			Handler:    _Router_CommitTaskForExcel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddRowToExcel",
			Handler:       _Router_AddRowToExcel_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "router.proto",
}
