// Code generated by protoc-gen-go. DO NOT EDIT.
// source: router.proto

package funcext

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExportToExcelParameter struct {
	Sheets               []*Sheet `protobuf:"bytes,2,rep,name=sheets,proto3" json:"sheets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportToExcelParameter) Reset()         { *m = ExportToExcelParameter{} }
func (m *ExportToExcelParameter) String() string { return proto.CompactTextString(m) }
func (*ExportToExcelParameter) ProtoMessage()    {}
func (*ExportToExcelParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{0}
}

func (m *ExportToExcelParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExportToExcelParameter.Unmarshal(m, b)
}
func (m *ExportToExcelParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExportToExcelParameter.Marshal(b, m, deterministic)
}
func (m *ExportToExcelParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportToExcelParameter.Merge(m, src)
}
func (m *ExportToExcelParameter) XXX_Size() int {
	return xxx_messageInfo_ExportToExcelParameter.Size(m)
}
func (m *ExportToExcelParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportToExcelParameter.DiscardUnknown(m)
}

var xxx_messageInfo_ExportToExcelParameter proto.InternalMessageInfo

func (m *ExportToExcelParameter) GetSheets() []*Sheet {
	if m != nil {
		return m.Sheets
	}
	return nil
}

type Sheet struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rows                 []*Row   `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sheet) Reset()         { *m = Sheet{} }
func (m *Sheet) String() string { return proto.CompactTextString(m) }
func (*Sheet) ProtoMessage()    {}
func (*Sheet) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{1}
}

func (m *Sheet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sheet.Unmarshal(m, b)
}
func (m *Sheet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sheet.Marshal(b, m, deterministic)
}
func (m *Sheet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sheet.Merge(m, src)
}
func (m *Sheet) XXX_Size() int {
	return xxx_messageInfo_Sheet.Size(m)
}
func (m *Sheet) XXX_DiscardUnknown() {
	xxx_messageInfo_Sheet.DiscardUnknown(m)
}

var xxx_messageInfo_Sheet proto.InternalMessageInfo

func (m *Sheet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sheet) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type Row struct {
	Axis                 string   `protobuf:"bytes,1,opt,name=axis,proto3" json:"axis,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{2}
}

func (m *Row) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Row.Unmarshal(m, b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Row.Marshal(b, m, deterministic)
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return xxx_messageInfo_Row.Size(m)
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetAxis() string {
	if m != nil {
		return m.Axis
	}
	return ""
}

func (m *Row) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ExportToExcelResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportToExcelResponse) Reset()         { *m = ExportToExcelResponse{} }
func (m *ExportToExcelResponse) String() string { return proto.CompactTextString(m) }
func (*ExportToExcelResponse) ProtoMessage()    {}
func (*ExportToExcelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{3}
}

func (m *ExportToExcelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExportToExcelResponse.Unmarshal(m, b)
}
func (m *ExportToExcelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExportToExcelResponse.Marshal(b, m, deterministic)
}
func (m *ExportToExcelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportToExcelResponse.Merge(m, src)
}
func (m *ExportToExcelResponse) XXX_Size() int {
	return xxx_messageInfo_ExportToExcelResponse.Size(m)
}
func (m *ExportToExcelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportToExcelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExportToExcelResponse proto.InternalMessageInfo

func (m *ExportToExcelResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*ExportToExcelParameter)(nil), "funcext.ExportToExcelParameter")
	proto.RegisterType((*Sheet)(nil), "funcext.Sheet")
	proto.RegisterType((*Row)(nil), "funcext.Row")
	proto.RegisterType((*ExportToExcelResponse)(nil), "funcext.ExportToExcelResponse")
}

func init() { proto.RegisterFile("router.proto", fileDescriptor_367072455c71aedc) }

var fileDescriptor_367072455c71aedc = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x4d, 0xd3, 0x46, 0x1c, 0xab, 0xc8, 0xa0, 0x12, 0x3c, 0x68, 0xd8, 0x83, 0xc4, 0x4b,
	0x84, 0x7a, 0x16, 0xbc, 0xf4, 0x2e, 0x6b, 0xcf, 0xc2, 0x5a, 0x46, 0x14, 0xd2, 0x4c, 0x98, 0xdd,
	0x98, 0xfd, 0xf9, 0xb2, 0xdb, 0xa4, 0x50, 0xc8, 0xed, 0xed, 0x9b, 0xfd, 0xde, 0xce, 0x5b, 0x58,
	0x0a, 0x77, 0x8e, 0xa4, 0x6a, 0x85, 0x1d, 0xe3, 0xe9, 0x77, 0xd7, 0x6c, 0xc9, 0x3b, 0xf5, 0x06,
	0xb7, 0x6b, 0xdf, 0xb2, 0xb8, 0x0d, 0xaf, 0xfd, 0x96, 0xea, 0x77, 0x23, 0x66, 0x47, 0x8e, 0x04,
	0x1f, 0x21, 0xb3, 0x3f, 0x44, 0xce, 0xe6, 0xb3, 0x22, 0x2d, 0xcf, 0x57, 0x97, 0xd5, 0xc0, 0x54,
	0x1f, 0xc1, 0xd6, 0xc3, 0x54, 0xbd, 0xc2, 0x22, 0x1a, 0x88, 0x30, 0x6f, 0xcc, 0x8e, 0xf2, 0xa4,
	0x48, 0xca, 0x33, 0x1d, 0x35, 0x16, 0x30, 0x17, 0xee, 0xc7, 0x88, 0xe5, 0x21, 0x42, 0x73, 0xaf,
	0xe3, 0x44, 0x3d, 0x43, 0xaa, 0xb9, 0x0f, 0xb0, 0xf1, 0xbf, 0x76, 0x84, 0x83, 0xc6, 0x6b, 0x58,
	0xfc, 0x99, 0xba, 0xa3, 0x7c, 0x16, 0xcd, 0xfd, 0x41, 0x3d, 0xc1, 0xcd, 0xd1, 0xc6, 0x9a, 0x6c,
	0xcb, 0x8d, 0x25, 0xbc, 0x82, 0xb4, 0x93, 0x7a, 0x48, 0x08, 0x72, 0xf5, 0x09, 0x99, 0x8e, 0xad,
	0x71, 0x03, 0x17, 0x47, 0x10, 0x3e, 0x1c, 0x56, 0x99, 0xae, 0x7f, 0x77, 0x3f, 0x7d, 0x61, 0x7c,
	0x4d, 0x9d, 0x94, 0xc9, 0x57, 0x16, 0x3f, 0xf3, 0xe5, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xea, 0x03,
	0xd9, 0x10, 0x5c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	ExportToExcel(ctx context.Context, opts ...grpc.CallOption) (Router_ExportToExcelClient, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) ExportToExcel(ctx context.Context, opts ...grpc.CallOption) (Router_ExportToExcelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[0], "/funcext.Router/ExportToExcel", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerExportToExcelClient{stream}
	return x, nil
}

type Router_ExportToExcelClient interface {
	Send(*ExportToExcelParameter) error
	CloseAndRecv() (*ExportToExcelResponse, error)
	grpc.ClientStream
}

type routerExportToExcelClient struct {
	grpc.ClientStream
}

func (x *routerExportToExcelClient) Send(m *ExportToExcelParameter) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerExportToExcelClient) CloseAndRecv() (*ExportToExcelResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ExportToExcelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	ExportToExcel(Router_ExportToExcelServer) error
}

// UnimplementedRouterServer can be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (*UnimplementedRouterServer) ExportToExcel(srv Router_ExportToExcelServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportToExcel not implemented")
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_ExportToExcel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).ExportToExcel(&routerExportToExcelServer{stream})
}

type Router_ExportToExcelServer interface {
	SendAndClose(*ExportToExcelResponse) error
	Recv() (*ExportToExcelParameter, error)
	grpc.ServerStream
}

type routerExportToExcelServer struct {
	grpc.ServerStream
}

func (x *routerExportToExcelServer) SendAndClose(m *ExportToExcelResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerExportToExcelServer) Recv() (*ExportToExcelParameter, error) {
	m := new(ExportToExcelParameter)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "funcext.Router",
	HandlerType: (*RouterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExportToExcel",
			Handler:       _Router_ExportToExcel_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "router.proto",
}
